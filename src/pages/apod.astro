---
import Layout from "../layouts/Layout.astro";
import { DEFAULT_LANG, getLanguageSafe, getTranslations } from "../i18n/translations.js";

const langParam = Astro.url.searchParams.get("lang");
const lang = getLanguageSafe(langParam ?? DEFAULT_LANG);
const translations = getTranslations(lang);
const { apod } = translations;

const apiKeyServer =
  import.meta.env.NASA_API_KEY ||
  import.meta.env.PUBLIC_NASA_API_KEY ||
  "DEMO_KEY";

const PUBLIC_API_KEY = import.meta.env.PUBLIC_NASA_API_KEY || "DEMO_KEY";

const today = new Date();
const pad = (n) => String(n).padStart(2, "0");
const todayStr = `${today.getFullYear()}-${pad(today.getMonth() + 1)}-${pad(today.getDate())}`;
const minStr = "1995-06-16"; // APOD earliest

let apodData = null;
let error = null;
try {
  const res = await fetch(`https://api.nasa.gov/planetary/apod?api_key=${apiKeyServer}&thumbs=true`);
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  apodData = await res.json();
} catch (e) {
  error = e?.message ?? String(e);
}
const isImage = apodData?.media_type === "image";
const isVideo = apodData?.media_type === "video";
const imageUrl = isImage ? apodData?.url : apodData?.thumbnail_url;
const showImage = Boolean(imageUrl);
---
<Layout lang={lang} title={apod.title} description={apod.subtitle} translations={translations}>
  <section class="apod">
    <header class="apod__header glass">
      <div class="apod__intro">
        <h1 class="apod__title">{apod.title}</h1>
        <p class="apod__subtitle">{apod.subtitle}</p>
      </div>
      <div class="apod__side">
        <div class="apod__native">
          <label class="apod__label" for="apod-date">{apod.dateLabel}</label>
          <input
            id="apod-date"
            type="date"
            min={minStr}
            max={todayStr}
            value={apodData?.date ?? todayStr}
          />
        </div>
        <div class="apod__buttons">
          <button type="button" id="apod-prev" class="btn secondary">{apod.prev}</button>
          <button type="button" id="apod-today" class="btn">{apod.today}</button>
          <button type="button" id="apod-next" class="btn secondary">{apod.next}</button>
        </div>
        <small class="apod__hint">{apod.minDateHint}</small>
      </div>
    </header>

    <div class="card" id="apod-card">
      <a
        id="apod-link"
        href={apodData?.hdurl ?? apodData?.url}
        target="_blank"
        rel="noopener noreferrer"
        class="media"
        aria-label={apod.openOriginalAria}
        style={showImage ? undefined : "display:none"}
      >
        <img id="apod-img" src={imageUrl ?? ""} alt={apodData?.title ?? apod.title} loading="lazy" style={showImage ? undefined : "display:none"} />
        <span id="apod-badge" class="badge" style={!isVideo || !showImage ? "display:none" : undefined}>{apod.videoBadge}</span>
      </a>
      <div class="media placeholder" id="apod-placeholder" style={showImage ? "display:none" : undefined}>
        {error
          ? `${apod.error}: ${error}`
          : (apodData && !showImage
            ? apod.noImageForDate
            : apod.mediaFallback)}
      </div>

      <div class="content">
        <h2 id="apod-heading">{apodData?.title ?? apod.title}</h2>
        {apodData?.date && <p class="date" id="apod-date-text">{apodData.date}</p>}
        {apodData?.explanation && <p class="desc" id="apod-desc">{apodData.explanation}</p>}
        <div class="actions">
          {apodData?.url && (
            <a class="btn" id="apod-btn-view" href={apodData.url} target="_blank" rel="noopener noreferrer">{apod.go}</a>
          )}
          {isImage && apodData?.hdurl && (
            <a class="btn secondary" id="apod-btn-hd" href={apodData.hdurl} target="_blank" rel="noopener noreferrer">HD</a>
          )}
        </div>
      </div>
    </div>

    <style>
      .apod { display: grid; gap: 1rem; }
      .apod__header {
        --cal-cell: 40px;
        display: grid;
        gap: 1rem;
        padding: 1.2rem 1.25rem 1.25rem;
        grid-template-columns: 1fr;
        align-items: start;
        margin-top: 2rem;
      }
      .apod__title { margin: 0; font-size: clamp(1.4rem, 3vw, 1.8rem); }
      .apod__subtitle { margin: 0.25rem 0 0; color: rgba(255,255,255,0.8); }
      .apod__side { display: grid; gap: 0.9rem; align-content: start; justify-items: stretch; }
      .apod__label { font-size: 0.9rem; color: rgba(255,255,255,0.8); }
      .apod__native { display: grid; grid-template-columns: auto 1fr; gap: 0.6rem; align-items: center; width: 100%; }
      .apod__native input[type="date"] {
        width: 100%;
        padding: 0.5rem 0.6rem;
        border-radius: 10px;
        border: 1px solid rgba(255,255,255,0.18);
        background: rgba(255,255,255,0.08);
        color: var(--text);
      }
      .apod__buttons { display: flex; gap: 0.5rem; flex-wrap: wrap; }
      .apod__hint { color: rgba(255,255,255,0.7); }
      @media (max-width: 820px) {
        .apod__header {
          margin-top: 0rem;
        }
      }
      @media (min-width: 1000px) and (max-width: 1023px) {
        .apod__header { grid-template-columns: 1.2fr 420px; align-items: start; }
        .apod__header { --cal-cell: 42px; }
        .apod__side { gap: 1rem; }
      }
      /* iPad Pro portrait and nearby (1024–1279px): keep single-column like iPad mini */
      @media (min-width: 1024px) and (max-width: 1279px) {
        .apod__header { grid-template-columns: 1fr; }
        .apod__header { --cal-cell: 44px; }
      }
      /* Laptop small (1280–1439px) */
      @media (min-width: 1280px) and (max-width: 1439px) {
        .apod__header { grid-template-columns: 1fr 580px; }
        .apod__header { --cal-cell: 48px; }
      }
      /* ≥1440px (MacBook): mimic single-column like iPad Pro */
      @media (min-width: 1440px) {
        .apod__header { grid-template-columns: 1fr; --cal-cell: 44px; }
        .apod__side { max-width: none; }
      }

      .card {
        width: min(100%, 1100px);
        margin: 0 auto;
        border-radius: 18px;
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(255, 255, 255, 0.18);
        background: rgba(255, 255, 255, 0.06);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.35);
        backdrop-filter: blur(12px) saturate(120%);
        -webkit-backdrop-filter: blur(12px) saturate(120%);
      }
      .media { display: block; position: relative; aspect-ratio: 16 / 9; background: rgba(255,255,255,0.05); }
      .media img { width: 100%; height: 100%; object-fit: cover; display: block; }
      .media.placeholder { display: grid; place-items: center; color: rgba(255,255,255,0.8); font-size: 0.95rem; min-height: 240px; }
      .badge { position: absolute; top: 12px; left: 12px; padding: 6px 10px; border-radius: 999px; font-size: 0.75rem; background: rgba(0,0,0,0.5); color: #fff; border: 1px solid rgba(255,255,255,0.25); backdrop-filter: blur(6px); -webkit-backdrop-filter: blur(6px); }
      .content { padding: 1rem 1.25rem 1.5rem; }
      .content h2 { margin: 0 0 0.25rem 0; font-size: 1.25rem; letter-spacing: 0.3px; }
      .date { margin: 0.25rem 0 0.75rem 0; color: rgba(255,255,255,0.7); font-size: 0.9rem; }
      .desc { margin: 0.25rem 0 1rem 0; color: rgba(255,255,255,0.9); line-height: 1.5; font-size: 0.95rem; }
      .actions { display: flex; gap: 0.6rem; flex-wrap: wrap; }
      .btn { display: inline-flex; align-items: center; gap: 0.4rem; padding: 0.55rem 0.85rem; border-radius: 10px; color: #fff; text-decoration: none; background: linear-gradient(135deg, rgba(255,255,255,0.18), rgba(255,255,255,0.05)); border: 1px solid rgba(255,255,255,0.28); box-shadow: 0 6px 18px rgba(0,0,0,0.25); transition: transform 0.15s ease, background 0.2s ease, box-shadow 0.2s ease; backdrop-filter: blur(6px); -webkit-backdrop-filter: blur(6px); }
      .btn:hover { transform: translateY(-1px); background: linear-gradient(135deg, rgba(255,255,255,0.22), rgba(255,255,255,0.08)); box-shadow: 0 10px 24px rgba(0,0,0,0.3); }
      .btn.secondary { background: rgba(255,255,255,0.08); }
    </style>
  </section>

  <script is:inline data-apikey={PUBLIC_API_KEY} data-min={minStr} data-max={todayStr} data-lang={lang} data-init={apodData?.date ?? todayStr} data-prev-aria={apod.monthPrevAria} data-next-aria={apod.monthNextAria} data-alt={apod.altFallback} data-noimage={apod.noImageForDate}>
    (function () {
      const S = document.currentScript;
      const API_KEY = S?.dataset?.apikey || 'DEMO_KEY';
      const MIN = S?.dataset?.min || '1995-06-16';
      const MAX = S?.dataset?.max;
      const LOCALE = S?.dataset?.lang || 'es';
      const INIT = S?.dataset?.init;
      const ARIA_PREV = S?.dataset?.prevAria || 'Previous month';
      const ARIA_NEXT = S?.dataset?.nextAria || 'Next month';
      const ALT_FALLBACK = S?.dataset?.alt || 'APOD';
      const NO_IMAGE_MSG = S?.dataset?.noimage || 'No image found for this day.';

      const $ = (id) => document.getElementById(id);
      const input = $('apod-date');
      const prev = $('apod-prev');
      const next = $('apod-next');
      const todayBtn = $('apod-today');
      const card = $('apod-card');
      const img = $('apod-img');
      const link = $('apod-link');
      const heading = $('apod-heading');
      const dateText = $('apod-date-text');
      const desc = $('apod-desc');
      const btnView = $('apod-btn-view');
      const btnHd = $('apod-btn-hd');
      const placeholder = $('apod-placeholder');
      const badge = $('apod-badge');
      const cal = $('apod-cal');

      function clearContent() {
        if (heading) heading.textContent = '';
        if (dateText) dateText.textContent = '';
        if (desc) desc.textContent = '';
      }

      // Date helpers using UTC to avoid timezone jumps
      function parseDate(s) {
        if (!s) return new Date();
        const [y, m, d] = String(s).split('-').map(Number);
        return new Date(Date.UTC(y, (m || 1) - 1, d || 1));
      }
      function formatUTC(date) {
        const p = (n) => String(n).padStart(2, '0');
        return `${date.getUTCFullYear()}-${p(date.getUTCMonth()+1)}-${p(date.getUTCDate())}`;
      }
      function formatLocal(date) {
        const p = (n) => String(n).padStart(2, '0');
        return `${date.getFullYear()}-${p(date.getMonth()+1)}-${p(date.getDate())}`;
      }

      function clamp(dateStr) {
        if (dateStr < MIN) return MIN;
        if (MAX && dateStr > MAX) return MAX;
        return dateStr;
      }

      async function fetchApod(dateStr) {
        const url = new URL('https://api.nasa.gov/planetary/apod');
        url.searchParams.set('api_key', API_KEY || 'DEMO_KEY');
        url.searchParams.set('thumbs', 'true');
        if (dateStr) url.searchParams.set('date', dateStr);
        const res = await fetch(url.toString());
        if (!res.ok) throw new Error('HTTP ' + res.status);
        return res.json();
      }

      function setLoading(loading) {
        card?.classList?.toggle('is-loading', !!loading);
      }

      function render(data) {
        if (!data) return;
        const isImage = data.media_type === 'image';
        const isVideo = data.media_type === 'video';
        const imageUrl = isImage ? data.url : data.thumbnail_url;
        if (imageUrl) {
          if (placeholder) {
            placeholder.style.display = 'none';
            placeholder.textContent = '';
          }
          if (img) {
            img.src = imageUrl;
            img.alt = data.title || ALT_FALLBACK;
            img.style.display = 'block';
          }
          if (link) {
            link.href = data.hdurl || data.url;
            link.style.display = 'block';
          }
        } else {
          // No image available: show placeholder message and hide media elements
          if (img) {
            img.src = '';
            img.style.display = 'none';
          }
          if (link) link.style.display = 'none';
          if (badge) badge.style.display = 'none';
          if (placeholder) {
            placeholder.textContent = NO_IMAGE_MSG;
            placeholder.style.display = 'grid';
          }
        }
        if (badge) {
          badge.style.display = (isVideo && imageUrl) ? 'inline-block' : 'none';
        }
        if (heading) heading.textContent = data.title || '';
        if (dateText) dateText.textContent = data.date || '';
        if (desc) desc.textContent = data.explanation || '';
        if (btnView) {
          btnView.href = data.url || '#';
          btnView.style.display = data.url ? 'inline-flex' : 'none';
        }
        if (btnHd) {
          btnHd.href = data.hdurl || '#';
          btnHd.style.display = (isImage && data.hdurl) ? 'inline-flex' : 'none';
        }
        if (input && data.date) input.value = clamp(data.date);
        updateNextDisabled();
      }

      function updateNextDisabled() {
        if (!next || !MAX) return;
        const current = input?.value || selected;
        next.disabled = current >= MAX;
      }

      async function go(dateStr) {
        const target = clamp(dateStr);
        // Reset UI to avoid showing stale media while loading
        if (img) { img.src = ''; img.style.display = 'none'; }
        if (link) { link.style.display = 'none'; link.removeAttribute('href'); }
        if (badge) { badge.style.display = 'none'; }
        if (btnView) { btnView.style.display = 'none'; btnView.removeAttribute('href'); }
        if (btnHd) { btnHd.style.display = 'none'; btnHd.removeAttribute('href'); }
        if (placeholder) {
          placeholder.textContent = '';
          placeholder.style.display = 'none';
        }
        clearContent();
        if (input && target) input.value = target;
        updateNextDisabled();

        try {
          setLoading(true);
          const data = await fetchApod(target);
          render(data);
          calendarSetSelected(data?.date || target, true);
        } catch (e) {
          console.error(e);
          // On error, ensure only the placeholder is visible
          if (img) { img.src = ''; img.style.display = 'none'; }
          if (link) { link.style.display = 'none'; }
          if (badge) { badge.style.display = 'none'; }
          if (btnView) { btnView.style.display = 'none'; }
          if (btnHd) { btnHd.style.display = 'none'; }
          clearContent();
          if (placeholder) {
            const msg = String(e?.message || 'Error');
            placeholder.textContent = /404/.test(msg) ? NO_IMAGE_MSG : msg;
            placeholder.style.display = 'grid';
          }
        } finally {
          setLoading(false);
        }
      }

      if (input) {
        input.addEventListener('change', () => go(clamp(input.value)));
      }
      if (prev) {
        prev.addEventListener('click', () => {
          const d = parseDate((input?.value) || selected || MAX);
          d.setUTCDate(d.getUTCDate() - 1);
          const nextDate = clamp(formatUTC(d));
          if (input) input.value = nextDate;
          go(nextDate);
        });
      }
      if (next) {
        next.addEventListener('click', () => {
          const d = parseDate((input?.value) || selected || MAX);
          d.setUTCDate(d.getUTCDate() + 1);
          const nextDate = clamp(formatUTC(d));
          if (input) input.value = nextDate;
          go(nextDate);
        });
      }
      if (todayBtn) {
        todayBtn.addEventListener('click', () => {
          if (input) input.value = MAX;
          go(MAX);
        });
      }

      updateNextDisabled();

      // Planet calendar
      let selected = clamp(INIT || MAX);
      let view = new Date(selected || MAX);
      view.setDate(1);

      function monthTitle(date) {
        return date.toLocaleDateString(LOCALE, { month: 'short', year: 'numeric' });
      }

      function removeDiacritics(s) {
        return s.normalize('NFD').replace(/\p{Diacritic}/gu, '');
      }
      function getWeekdays(weekStartsOn = 0) {
        const base = new Date(2024, 8, 1); // Sunday
        const names = [];
        for (let i=0;i<7;i++) {
          const d = new Date(base);
          d.setDate(base.getDate()+i);
          let n = d.toLocaleDateString(LOCALE, { weekday: 'short' });
          n = removeDiacritics(n).replace(/\.$/, '');
          n = n.slice(0, 2);
          n = n.charAt(0).toUpperCase() + n.slice(1).toLowerCase();
          names.push(n);
        }
        // rotate according to week start
        if (weekStartsOn) {
          return names.slice(weekStartsOn).concat(names.slice(0, weekStartsOn));
        }
        return names;
      }

      function startOfWeek(date, weekStartsOn = 0) {
        const d = new Date(date);
        const day = d.getDay();
        const diff = (day - weekStartsOn + 7) % 7;
        d.setDate(d.getDate() - diff);
        d.setHours(0,0,0,0);
        return d;
      }

      function daysForView(date, weekStartsOn = 0) {
        const first = new Date(date.getFullYear(), date.getMonth(), 1);
        const last = new Date(date.getFullYear(), date.getMonth()+1, 0);
        const start = startOfWeek(first, weekStartsOn);
        const total = 42; // 6 weeks
        const list = [];
        for (let i=0;i<total;i++) {
          const cur = new Date(start);
          cur.setDate(start.getDate()+i);
          const s = formatLocal(cur);
          const item = {
            date: cur,
            s,
            inMonth: cur.getMonth() === date.getMonth(),
            disabled: s < MIN || (MAX && s > MAX),
            isToday: MAX && s === MAX,
            isSelected: selected && s === selected,
          };
          list.push(item);
        }
        return { first, last, list };
      }

      function clear(el) { while (el.firstChild) el.removeChild(el.firstChild); }

      function renderCalendar() {
        if (!cal) return;
        clear(cal);
        const weekStartsOn = /^(es|de)(-|$|_)/i.test(LOCALE) ? 1 : 0;

        // Header
        const header = document.createElement('div');
        header.className = 'cal-header';
        const btnPrev = document.createElement('button');
        btnPrev.className = 'cal-nav';
        btnPrev.setAttribute('aria-label', ARIA_PREV);
        btnPrev.textContent = '‹';
        const title = document.createElement('div');
        title.className = 'cal-title';
        title.textContent = monthTitle(view);
        const btnNext = document.createElement('button');
        btnNext.className = 'cal-nav';
        btnNext.setAttribute('aria-label', ARIA_NEXT);
        btnNext.textContent = '›';
        header.append(btnPrev, title, btnNext);
        cal.appendChild(header);

        // Weekday headers
        const dow = document.createElement('div');
        dow.className = 'cal-dow';
        for (const name of getWeekdays(weekStartsOn)) {
          const s = document.createElement('span');
          s.textContent = name;
          dow.appendChild(s);
        }
        cal.appendChild(dow);

        // Grid
        const grid = document.createElement('div');
        grid.className = 'cal-grid';
        const { list } = daysForView(view, weekStartsOn);
        list.forEach((d) => {
          let cell;
          if (!d.inMonth) {
            cell = document.createElement('div');
            cell.className = 'cal-date cal-empty';
          } else {
            cell = document.createElement('button');
            cell.type = 'button';
            cell.className = 'cal-date';
            cell.textContent = String(d.date.getDate());
            if (d.disabled) cell.setAttribute('disabled', '');
            if (d.isToday) cell.classList.add('is-today');
            if (d.isSelected) cell.classList.add('is-selected');
            cell.addEventListener('click', () => {
              if (d.disabled) return;
              if (input) input.value = d.s;
              go(d.s);
            });
          }
          grid.appendChild(cell);
        });
        cal.appendChild(grid);

        btnPrev.addEventListener('click', () => {
          view = new Date(view.getFullYear(), view.getMonth()-1, 1);
          renderCalendar();
        });
        btnNext.addEventListener('click', () => {
          view = new Date(view.getFullYear(), view.getMonth()+1, 1);
          renderCalendar();
        });
      }

      function calendarSetSelected(dateStr, alignView) {
        if (!dateStr) return;
        selected = clamp(dateStr);
        if (alignView) {
          const d = new Date(selected);
          view = new Date(d.getFullYear(), d.getMonth(), 1);
        }
        renderCalendar();
      }

      // Init calendar with current selection
      renderCalendar();
      if (selected) calendarSetSelected(selected, true);
      if (input && selected) input.value = selected;
    })();
  </script>
</Layout>
